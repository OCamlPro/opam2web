open Cow
open Cow.Html

open O2w_common

let string_of_time () =
  let t = Unix.localtime (Unix.time ()) in
  Printf.sprintf "%d/%d/%d" t.Unix.tm_mday (t.Unix.tm_mon + 1)
      (t.Unix.tm_year + 1900)

let create ~title ~header ~body ~footer =
  <:xml<
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>OPAM - $str: title$</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description"
        content="The homepage of OPAM, a package manager for OCaml" />
    <meta name="author" content="OCamlPro" />

    <!-- Le styles -->
    <link href="css/bootstrap.css" rel="stylesheet" />
    <style type="text/css">
      body {
        padding-top: 60px;
        padding-bottom: 40px;
      }
    </style>
    <link href="css/bootstrap-responsive.css" rel="stylesheet" />
    <link href="js/google-code-prettify/prettify.css" rel="stylesheet" />

    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
  </head>

  <body>
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="btn btn-navbar" data-toggle="collapse"
              data-target=".nav-collapse">
            <span class="icon-bar"> </span>
            <span class="icon-bar"> </span>
            <span class="icon-bar"> </span>
          </a>
          <a class="brand" href="index.html">OPAM</a>
          <div class="nav-collapse collapse">
            $header$
<!--
            <form class="navbar-form pull-right">
              <input class="span2" type="text" placeholder="Search packages" />
            </form>
-->
          </div><!--/.nav-collapse -->
        </div>
      </div>
    </div>

    <div class="container">

      $body$

      <hr />

      <footer>
        $footer$
      </footer>

    </div> <!-- /container -->

    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="js/jquery.js"> </script>
    <script src="js/google-code-prettify/prettify.js"> </script>
    <script src="js/bootstrap.min.js"> </script>
    <script src="js/site.js"> </script>

  </body>
</html>
  >>

let make_nav active pages: Cow.Html.t =
  let make_item menu (l, _) =
    let item =
      if l = active then
        <:xml< <li class="active">$html_of_link l$</li> >>
      else
        <:xml< <li>$html_of_link l$</li> >>
    in item :: menu
  in
  <:xml<
    <ul class="nav">
      $list: List.fold_left make_item [] (List.rev pages)$
    </ul>
  >>

let generate ~out_dir (menu_links, pages) =
  Printf.printf "Generating html files:\n%!";
  let footer = <:xml<
      <p>
        Last modified: $str:string_of_time ()$ –
        Generated by <a href="https://github.com/mirage/ocaml-cow"
            title="OCaml on the Web">COW</a>.<br />
        © <a href="http://www.ocamlpro.com/">OCamlPro</a> 2012
      </p>
    >> in
  let aux (link, contents) =
    Printf.printf "> %s... %!" link.href;
    let header = make_nav link menu_links in
    let chan = open_out (Printf.sprintf "%s/%s" out_dir link.href) in
    let page = create ~title:link.text ~header ~body:contents ~footer in
    output_string chan (Html.to_string page);
    close_out chan;
    Printf.printf "[Done]\n"
  in
  (* Filter out external links from the menu pages to generate *)
  let menu_pages = List.rev (List.fold_left (fun acc (l, m) ->
      match m with
      | External -> acc
      | Internal c -> (l, c) :: acc)
    [] menu_links)
  in
  List.iter aux menu_pages;
  List.iter aux pages

